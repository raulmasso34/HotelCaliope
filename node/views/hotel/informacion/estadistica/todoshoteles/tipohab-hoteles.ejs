<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estad칤sticas de Habitaciones Reservadas</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-light">

    <div class="container mt-5">
        <div class="card shadow-lg p-4">
            <h2 class="text-center mb-4">游늵 Estad칤sticas de Habitaciones Reservadas por Hotel</h2>
            <div id="leyendaTipos" class="text-center mb-3"></div> 

            <canvas id="graficoHabitaciones"></canvas>

            <a href="/estadisticas-cadena-hoteles" class="btn btn-sm btn-danger" title="Exit">
                <i class="fa-solid fa-right-from-bracket"></i>
            </a>
        </div>
    </div>

    <script>
        // Datos enviados desde Node.js
        const datos = JSON.parse('<%- JSON.stringify(datos) %>');

        // Obtener lista de hoteles 칰nicos
        const hoteles = [...new Set(datos.map(item => item.hotel))];

        // Obtener lista de tipos de habitaciones 칰nicos
        const tiposHabitacion = [...new Set(datos.map(item => item.tipo_habitacion))];

        // Crear un objeto para almacenar reservas por tipo y hotel
        const reservasPorTipo = {};
        tiposHabitacion.forEach(tipo => {
            reservasPorTipo[tipo] = hoteles.map(hotel => {
                const dato = datos.find(d => d.hotel === hotel && d.tipo_habitacion === tipo);
                return dato ? dato.total_reservas : 0;
            });
        });

        // Obtener el valor m치ximo de reservas para calcular el l칤mite del eje Y
        let maxReservas = 0;
        Object.values(reservasPorTipo).forEach(array => {
            maxReservas = Math.max(maxReservas, ...array);
        });

        // Establecer el l칤mite en un 5% m치s del m치ximo
        const yMaxLimit = Math.ceil(maxReservas * 1.05);

        // Almac칠n de colores fijos por tipo de habitaci칩n
        const coloresFijos = JSON.parse(localStorage.getItem('coloresHabitaciones')) || {};

        // Funci칩n para generar colores aleatorios
        function generarColorAleatorio() {
            return `#${Math.floor(Math.random() * 16777215).toString(16)}`;
        }

        // Asignar colores fijos a cada tipo de habitaci칩n
        tiposHabitacion.forEach(tipo => {
            if (!coloresFijos[tipo]) {
                coloresFijos[tipo] = generarColorAleatorio();
            }
        });

        // Guardar en localStorage para persistencia
        localStorage.setItem('coloresHabitaciones', JSON.stringify(coloresFijos));

        // Crear datasets para cada tipo de habitaci칩n
        const datasets = tiposHabitacion.map(tipo => ({
            label: tipo,
            data: reservasPorTipo[tipo],
            backgroundColor: coloresFijos[tipo],
            borderWidth: 1
        }));

        // Configurar gr치fico
        const ctx = document.getElementById('graficoHabitaciones').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: hoteles, // Eje X con los nombres de los hoteles
                datasets: datasets // Cada tipo de habitaci칩n tiene su color
            },
            options: {
                responsive: true,
                scales: {
                    y: { 
                        beginAtZero: true,
                        max: yMaxLimit // L칤mite m치ximo del eje Y con 5% extra
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                }
            }
        });

        // Funci칩n para mostrar la leyenda de colores por tipo de habitaci칩n
        function mostrarLeyenda() {
            const leyendaContainer = document.getElementById('leyendaTipos');
            leyendaContainer.innerHTML = ''; 

            tiposHabitacion.forEach(tipo => {
                const color = coloresFijos[tipo];
                const leyendaItem = document.createElement('div');
                leyendaItem.style.display = 'inline-block';
                leyendaItem.style.marginRight = '15px';

                // Crear un c칤rculo de color para cada tipo de habitaci칩n
                const colorCirculo = document.createElement('span');
                colorCirculo.style.display = 'inline-block';
                colorCirculo.style.width = '15px';
                colorCirculo.style.height = '15px';
                colorCirculo.style.backgroundColor = color;
                colorCirculo.style.borderRadius = '50%';
                colorCirculo.style.marginRight = '5px';

                // Crear el nombre del tipo de habitaci칩n
                const tipoNombre = document.createElement('span');
                tipoNombre.textContent = tipo;

                // A침adir los elementos al contenedor de leyenda
                leyendaItem.appendChild(colorCirculo);
                leyendaItem.appendChild(tipoNombre);
                leyendaContainer.appendChild(leyendaItem);
            });
        }

        // Mostrar la leyenda

    </script>

</body>
</html>
