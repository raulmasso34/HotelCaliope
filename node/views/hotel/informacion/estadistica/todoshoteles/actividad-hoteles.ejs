<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estad√≠sticas de Actividades</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-light">

    <div class="container mt-5">
        <div class="card shadow-lg p-4">
            <h2 class="text-center mb-4">üìä Estad√≠sticas de Actividades Reservadas</h2>

            <canvas id="graficoActividades"></canvas>

            <a href="/estadisticas/cadena-hoteles" class="btn btn-secondary mt-3">‚¨ÖÔ∏è Volver al Men√∫</a>
        </div>
    </div>

    <script>
        // Datos enviados desde Node.js
        const datos = JSON.parse('<%- JSON.stringify(datos) %>');

        // Obtener nombres √∫nicos de hoteles
        const hotelesUnicos = [...new Set(datos.map(item => item.hotel))];

        // Funci√≥n para generar colores aleatorios
        function generarColorAleatorio() {
            return `#${Math.floor(Math.random() * 16777215).toString(16)}`;
        }

        // Obtener o asignar colores fijos
        let colores = JSON.parse(localStorage.getItem("coloresHoteles")) || {};
        hotelesUnicos.forEach(hotel => {
            if (!colores[hotel]) {
                colores[hotel] = generarColorAleatorio(); // Generar nuevo color si no existe
            }
        });
        localStorage.setItem("coloresHoteles", JSON.stringify(colores)); // Guardar colores fijos

        // Preparar datos para el gr√°fico
        const hoteles = datos.map(item => item.hotel);
        const reservas = datos.map(item => item.total_reservas);
        const coloresAsignados = hoteles.map(hotel => colores[hotel]);

        // Configurar gr√°fico
        const ctx = document.getElementById('graficoActividades').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: hotelesUnicos, // Eje X con los nombres de los hoteles (√∫nicos)
                datasets: [{
                    label: 'Total de Actividades Reservadas',
                    data: hotelesUnicos.map(hotel => {
                        // Filtrar las reservas para cada hotel
                        const reservasHotel = datos.filter(item => item.hotel === hotel);
                        return reservasHotel.reduce((total, item) => total + item.total_reservas, 0);
                    }),
                    backgroundColor: hotelesUnicos.map(hotel => colores[hotel]),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                },
                plugins: {
                    legend: { display: false, position: 'top' } // Mostrar la leyenda en la parte superior
                }
            }
        });
    </script>

</body>
</html>
